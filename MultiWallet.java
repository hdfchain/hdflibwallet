// Code generated by gobind. DO NOT EDIT.

// Java class hdflibwallet.MultiWallet is a proxy for talking to a Go program.
//
//   autogenerated by gobind -lang=java github.com/hdfchain/hdflibwallet
package hdflibwallet;

import go.Seq;

public final class MultiWallet implements Seq.Proxy {
	static { Hdflibwallet.touch(); }
	
	private final int refnum;
	
	@Override public final int incRefnum() {
	      Seq.incGoRef(refnum, this);
	      return refnum;
	}
	
	public MultiWallet(String rootDir, String dbDriver, String netType) {
		this.refnum = __NewMultiWallet(rootDir, dbDriver, netType);
		Seq.trackGoRef(refnum, this);
	}
	
	private static native int __NewMultiWallet(String rootDir, String dbDriver, String netType);
	
	MultiWallet(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
	
	// skipped field MultiWallet.Politeia with unsupported type: github.com/hdfchain/hdflibwallet.Politeia
	
	public native void addSyncProgressListener(SyncProgressListener syncProgressListener, String uniqueIdentifier) throws Exception;
	public native void addTxAndBlockNotificationListener(TxAndBlockNotificationListener txAndBlockNotificationListener, String uniqueIdentifier) throws Exception;
	// skipped method MultiWallet.AllWallets with unsupported parameter or return types
	
	public native boolean allWalletsAreWatchOnly() throws Exception;
	public native void cancelRescan();
	public native void cancelSync();
	/**
	 * ChangePrivatePassphraseForWallet attempts to change the wallet&#39;s passphrase and re-encrypts the seed with the new passphrase.
	 */
	public native void changePrivatePassphraseForWallet(long walletID, byte[] oldPrivatePassphrase, byte[] newPrivatePassphrase, int privatePassphraseType) throws Exception;
	public native void changeStartupPassphrase(byte[] oldPassphrase, byte[] newPassphrase, int passphraseType) throws Exception;
	public native void clearConfig();
	public native int connectedPeers();
	public native Wallet createNewWallet(String walletName, String privatePassphrase, int privatePassphraseType) throws Exception;
	public native Wallet createWatchOnlyWallet(String walletName, String extendedPublicKey) throws Exception;
	public native int currentSyncStage();
	public native void deleteUserConfigValueForKey(String key);
	public native void deleteWallet(long walletID, byte[] privPass) throws Exception;
	public native void enableSyncLogs();
	public native GeneralSyncProgress generalSyncProgress();
	public native BlockInfo getBestBlock();
	public native BlockInfo getLowestBlock();
	public native long getLowestBlockTimestamp();
	public native String getTransactions(int offset, int limit, int txFilter, boolean newestFirst) throws Exception;
	public native boolean isAddressValid(String address);
	public native boolean isConnectedToHdfchainNetwork();
	public native boolean isRescanning();
	public native boolean isStartupSecuritySet();
	public native boolean isSyncProgressListenerRegisteredFor(String uniqueIdentifier);
	public native boolean isSynced();
	public native boolean isSyncing();
	public native Wallet linkExistingWallet(String walletName, String walletDataDir, String originalPubPass, int privatePassphraseType) throws Exception;
	public native int loadedWalletsCount();
	public native TxAuthor newUnsignedTx(Wallet sourceWallet, int sourceAccountNumber);
	/**
	 * NumWalletsNeedingSeedBackup returns the number of opened wallets whose seed haven&#39;t been verified.
	 */
	public native int numWalletsNeedingSeedBackup();
	public native void openWallets(byte[] startupPassphrase) throws Exception;
	public native String openedWalletIDs();
	// skipped method MultiWallet.OpenedWalletIDsRaw with unsupported parameter or return types
	
	public native int openedWalletsCount();
	public native void publishLastSyncProgress(String uniqueIdentifier) throws Exception;
	public native boolean readBoolConfigValueForKey(String key, boolean defaultValue);
	public native double readDoubleConfigValueForKey(String key, double defaultValue);
	public native int readInt32ConfigValueForKey(String key, int defaultValue);
	public native long readIntConfigValueForKey(String key, long defaultValue);
	public native long readLongConfigValueForKey(String key, long defaultValue);
	public native String readStringConfigValueForKey(String key);
	// skipped method MultiWallet.ReadUserConfigValue with unsupported parameter or return types
	
	public native void removeStartupPassphrase(byte[] oldPassphrase) throws Exception;
	public native void removeSyncProgressListener(String uniqueIdentifier);
	public native void removeTxAndBlockNotificationListener(String uniqueIdentifier);
	public native void renameWallet(long walletID, String newName) throws Exception;
	public native int requiredConfirmations();
	public native void rescanBlocks(long walletID) throws Exception;
	public native void restartSpvSync() throws Exception;
	public native Wallet restoreWallet(String walletName, String seedMnemonic, String privatePassphrase, int privatePassphraseType) throws Exception;
	/**
	 * RootDirFileSizeInBytes returns the total directory size of
	multiwallet&#39;s root directory in bytes.
	 */
	public native long rootDirFileSizeInBytes() throws Exception;
	// skipped method MultiWallet.SaveUserConfigValue with unsupported parameter or return types
	
	public native void setBlocksRescanProgressListener(BlocksRescanProgressListener blocksRescanProgressListener);
	public native void setBoolConfigValueForKey(String key, boolean value);
	public native void setDoubleConfigValueForKey(String key, double value);
	public native void setInt32ConfigValueForKey(String key, int value);
	public native void setIntConfigValueForKey(String key, long value);
	public native void setLongConfigValueForKey(String key, long value);
	public native void setStartupPassphrase(byte[] passphrase, int passphraseType) throws Exception;
	public native void setStringConfigValueForKey(String key, String value);
	public native void shutdown();
	public native void spvSync() throws Exception;
	public native int startupSecurityType();
	public native void syncInactiveForPeriod(long totalInactiveSeconds);
	public native int syncedWalletsCount();
	public native void unlockWallet(long walletID, byte[] privPass) throws Exception;
	public native void validateExtPubKey(String extendedPubKey) throws Exception;
	public native boolean verifyMessage(String address, String message, String signatureBase64) throws Exception;
	/**
	 * VerifySeedForWallet compares seedMnemonic with the decrypted wallet.EncryptedSeed and clears wallet.EncryptedSeed if they match.
	 */
	public native boolean verifySeedForWallet(long walletID, String seedMnemonic, byte[] privpass) throws Exception;
	public native void verifyStartupPassphrase(byte[] startupPassphrase) throws Exception;
	public native boolean walletNameExists(String walletName) throws Exception;
	public native Wallet walletWithID(long walletID);
	public native WalletsIterator walletsIterator();
	@Override public boolean equals(Object o) {
		if (o == null || !(o instanceof MultiWallet)) {
		    return false;
		}
		MultiWallet that = (MultiWallet)o;
		// skipped field MultiWallet.Politeia with unsupported type: github.com/hdfchain/hdflibwallet.Politeia
		
		return true;
	}
	
	@Override public int hashCode() {
	    return java.util.Arrays.hashCode(new Object[] {});
	}
	
	@Override public String toString() {
		StringBuilder b = new StringBuilder();
		b.append("MultiWallet").append("{");
		return b.append("}").toString();
	}
}

